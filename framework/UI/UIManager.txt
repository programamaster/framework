using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class UIManager : BaseManager<UIManager>
{
    //存储面板的容器
    private Dictionary<string, BasePanel> panelDic = new Dictionary<string, BasePanel>();
    //一开始就得到我们的 Canvas对象
    private Transform canvasTrans;
    public UIManager()
    {
        //得到场景上创建好的Canvas对象
        canvasTrans = GameObject.Find("Canvas").transform;
        //让Canvas对象过场景 不移除
        GameObject.DontDestroyOnLoad(canvasTrans.gameObject);
    }

    /// <summary>
    /// 显示面板
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <returns></returns>
    public T ShowPanel<T>() where T : BasePanel
    {
        //根据泛型类型得到面板名字
        string panelName = typeof(T).Name;

        if (panelDic.ContainsKey(panelName))
            return panelDic[panelName] as T;

        //根据类名动态创建(保证类名和面板的名称一致)
        GameObject panelObj = GameObject.Instantiate(Resources.Load<GameObject>("PrefabsUI/" + panelName));
        panelObj.transform.SetParent(canvasTrans, false);
        //得到对应的面板脚本 
        T panel = panelObj.GetComponent<T>();
        //把面板脚本存储到 对应容器中 可以方便我们获取它
        panelDic.Add(panelName, panel);
        //调用自己的显示逻辑
        panel.ShowMe();
        return panel;
    }

    /// <summary>
    /// 隐藏面板
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="isFade">是否希望淡入淡出</param>
    public void HidePanel<T>(bool isFade = true) where T : BasePanel
    {
        //根据泛型类型得到面板名字
        string panelName = typeof(T).Name;
        //判断当前显示的面板 有没有该名字的面板
        if (panelDic.ContainsKey(panelName))
        {
            if (isFade)
            {
                panelDic[panelName].HideMe(() =>
                {
                    //淡入淡出成功后删除面板
                    GameObject.Destroy(panelDic[panelName].gameObject);
                    panelDic.Remove(panelName);
                });
            }
            else
            {
                //直接删除
                GameObject.Destroy(panelDic[panelName].gameObject);
                panelDic.Remove(panelName);
            }
        }
    }

    /// <summary>
    /// 获得面板
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <returns></returns>
    public T Getpanel<T>() where T : BasePanel
    {
        string panelName = typeof(T).Name;
        if (panelDic.ContainsKey(panelName))
            return panelDic[panelName] as T;
        return null;
    }
}
