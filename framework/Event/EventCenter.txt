using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
///<summary>
///创建人:赵晨晖
///功能说明:事件中心 单例模式的对象(基于委托和观察者模式)
///</summary>
public class EventCenter : BaseManager<EventCenter>
{
    //key —— 事件的名字(比如:怪物死亡，玩家死亡，通关等)
    //value —— 对应监听这些事件的对应委托函数
    private Dictionary<string, UnityAction<object>> eventDic = new Dictionary<string, UnityAction<object>>();

    /// <summary>
    /// 获取事件监听
    /// </summary>
    /// <param name="name">事件的名称</param>
    /// <param name="action">准备用来处理事件的委托函数</param>
    public void AddEventListener(string name, UnityAction<object> action)
    {
        //有无对应的事件监听
        if (eventDic.ContainsKey(name))
        {
            eventDic[name] += action;
        }
        else
        {
            eventDic.Add(name, action);
        }
    }

    /// <summary>
    /// 移除对应的事件监听
    /// </summary>
    /// <param name="name">事件的名称</param>
    /// <param name="action">之前处理事件的委托函数</param>
    public void RemoveEventListener(string name, UnityAction<object> action)
    {
        if (eventDic.ContainsKey(name))
        {
            eventDic[name] -= action;
        }
    }

    /// <summary>
    /// 事件触发
    /// </summary>
    /// <param name="name">对应名字的事件触发</param>
    public void EventTrigger(string name, object info)
    {
        //有无对应的事件监听
        if (eventDic.ContainsKey(name))
        {
            eventDic[name].Invoke(info);
        }
    }

    /// <summary>
    /// 清空事件中心(主要用于场景切换时)
    /// </summary>
    public void Clear()
    {
        eventDic.Clear();
    }

}
